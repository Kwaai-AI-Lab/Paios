openapi: 3.0.3
info:
  version: '0.1'
  title: Kwaai pAI-OS API
  description: 'API for pAI-OS admin interfaces (web, app) to backend services.'
  termsOfService: 'https://paios.org'
  contact:
    name: Kwaai
    url: 'https://www.kwaai.ai'
    email: contact@kwaai.ai
  license:
    url: 'https://github.com/pAI-OS/paios/blob/main/LICENSE'
    name: MIT
servers:
  - url: /api/v1
    description: ''
paths:
  /abilities:
    get:
      tags:
        - Abilities Management
      summary: Retrieve all abilities
      description: Retrieve the information of all abilities.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ability'
              examples:
                Example 1:
                  value:
                    - id: optical-character-recognition
                      name: Optical Character Recognition
                      description: Conversion of images to text
                    - id: vector-database
                      name: Vector Database
                      description: Stores vectors (fixed-length lists of numbers) along with other data items
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
  '/abilities/{abilityId}':
    get:
      tags:
        - Abilities Management
      summary: Retrieve ability by id
      description: Retrieve the information of the ability with the matching ability ID.
      parameters:
        - name: abilityId
          in: path
          description: ID of an existing ability
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ability'
              examples:
                Example 1:
                  value:
                    id: optical-character-recognition
                    name: Optical Character Recognition
                    description: Conversion of images to text
  '/abilities/{abilityId}/start':
    post:
      tags:
        - Abilities Management
      summary: Start ability
      description: Starts the ability with the matching ability ID.
      parameters:
        - name: abilityId
          in: path
          description: ID of an existing ability
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/abilities/{abilityId}/stop':
    post:
      tags:
        - Abilities Management
      summary: Stop ability
      description: Stops the ability with the matching ability ID.
      parameters:
        - name: abilityId
          in: path
          description: ID of an existing ability
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /assets:
    get:
      tags:
        - Asset Management
      summary: Retrieve all assets
      description: Retrieve the information of all assets.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
              examples:
                Example 1:
                  value:
                    - id: 523
                      userId: 5bae4a90-ce69-4483-86ef-d723258f21e5
                      title: Attention Is All You Need
                      creator: Ashish Vaswani et al
                      subject: Artificial Intelligence
                      description: 'We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.'
                    - id: 952
                      userId: 1cbb0bc5-bae2-4b9d-9555-f2282f767047
                      title: Generative Adversarial Networks
                      creator: Goodfellow et al
                      subject: Artificial Intelligence
                      description: 'We propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G.'
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    post:
      summary: Create new asset
      tags:
        - Asset Management
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Missing Required Information
      x-stoplight:
        id: xk3th6kh2xaea
      description: Creates a new asset.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                userId:
                  type: string
                  x-stoplight:
                    id: tcrecsxwclhod
                title:
                  type: string
                  x-stoplight:
                    id: ewm2l63kcoemr
                creator:
                  type: string
                  x-stoplight:
                    id: z31hnyze67lcw
                subject:
                  type: string
                  x-stoplight:
                    id: wpa1675fg6r1s
                description:
                  type: string
                  x-stoplight:
                    id: fth78lwtn3nw3
  '/assets/{assetId}':
    get:
      tags:
        - Asset Management
      summary: Retrieve asset by id
      description: Retrieve the information of the asset with the matching asset ID.
      parameters:
        - name: assetId
          in: path
          description: Id of an existing asset.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
              examples:
                Example 1:
                  value:
                    id: 523
                    title: Attention Is All You Need
                    creator: Vaswani et al
                    subject: Artificial Intelligence
                    description: 'We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.'
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    put:
      summary: Update asset by id
      tags:
        - Asset Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
      operationId: ''
      x-stoplight:
        id: y45hktoao8x1p
      description: Updates the asset with the given id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
    delete:
      summary: Delete asset by id
      description: Deletes the asset with the specified id.
      tags:
        - Asset Management
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      x-stoplight:
        id: qzbqf3cyubxfh
    parameters:
      - schema:
          type: string
        name: assetId
        description: id of an existing asset.
        in: path
        required: true
  /channels:
    get:
      tags:
        - Channel Management
      summary: Retrieve all channels
      description: Retrieve the information of all channels.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
              examples:
                Example 1:
                  value:
                    - id: llm-api
                      name: Large Language Model API
                      uri: 'https://localhost:8080/v1'
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    post:
      summary: Create new channel
      tags:
        - Channel Management
      responses:
        '200':
          description: OK
        '400':
          description: Missing Required Information
      x-stoplight:
        id: 7kb6p8nsmdmcz
      description: Create a new channel.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
  '/channels/{channelId}':
    get:
      tags:
        - Channel Management
      summary: Retrieve channel by id
      description: Retrieve the information of the channel with the matching channel ID.
      parameters:
        - name: channelId
          in: path
          description: ID of an existing channel
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
              examples:
                Example 1:
                  value:
                    id: llm-api
                    name: Large Language Model API
                    uri: 'https://localhost:8080/v1'
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    put:
      tags:
        - Channel Management
      x-stoplight:
        id: ecf6d452243db
      summary: Update channel by key
      description: Updates the channel with the specified id.
      parameters:
        - name: channelId
          in: path
          description: ID of channel
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    delete:
      tags:
        - Channel Management
      summary: Delete channel by key
      description: Delete a channel with the specified ID.
      parameters:
        - name: channelId
          in: path
          description: ID of channel
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/config/{key}':
    get:
      tags:
        - Configuration Management
      summary: Retrieve config by key
      description: Retrieve the config item with the specified key.
      parameters:
        - name: key
          in: path
          description: Key for Config item
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
              examples:
                Example 1:
                  value: 123
                Example 2:
                  value: secret
                Example 3:
                  value:
                    x: 'y'
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    put:
      tags:
        - Configuration Management
      x-stoplight:
        id: 90bb04de57693
      summary: Update config by key
      description: Set a config item with the specified key.
      parameters:
        - name: key
          in: path
          description: Key for Config item
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    delete:
      tags:
        - Configuration Management
      summary: Delete config by key
      description: Delete a config item with the specified key.
      parameters:
        - name: key
          in: path
          description: Key for Config item
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  /users:
    get:
      tags:
        - User Management
      summary: Retrieve all users
      description: Get all users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                Example 1:
                  value:
                    - id: 5bae4a90-ce69-4483-86ef-d723258f21e5
                      name: Alice Smith
                      email: alice.smith@gmail.com
                    - id: 1cbb0bc5-bae2-4b9d-9555-f2282f767047
                      name: Bob Jones
                      email: bob.jones@gmail.com
          headers:
            X-Total-Count:
              schema:
                type: integer
                example: 2
              description: Count of results required by jsonServer Data Provider for pagination
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    post:
      tags:
        - User Management
      summary: Create new user
      description: Create a new user.
      requestBody:
        description: Post the necessary fields for the API to create a new user.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                email:
                  type: string
            examples:
              Create User Bob Fellow:
                value:
                  name: Bob Fellow
                  email: bob.fellow@gmail.com
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 1cbb0bc5-bae2-4b9d-9555-f2282f767047
                    name: Bob Fellow
                    email: bob.fellow@gmail.com
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/users/{userId}':
    get:
      tags:
        - User Management
      summary: Retrieve user by id
      description: Retrieve the information of the user with the matching user ID.
      parameters:
        - name: userId
          in: path
          description: UUID of user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 5bae4a90-ce69-4483-86ef-d723258f21e5
                    name: Alice Smith
                    email: alice.smith@gmail.com
        '404':
          description: User Not Found
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    delete:
      tags:
        - User Management
      summary: Delete user by id
      description: Delete the user with the specified ID
      parameters:
        - name: userId
          in: path
          description: UUID of user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
    put:
      tags:
        - User Management
      summary: Update user
      description: Update the information of an existing user.
      parameters:
        - name: userId
          in: path
          description: UUID of user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
            examples:
              Update Name:
                value:
                  name: Rebecca Baker
              Update Email:
                value:
                  email: rebecca@gmail.com
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 08c73f41-a733-4cef-945e-2b0aa978452e
                    name: Rebecca Baker
                    email: rebecca@gmail.com
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/abilities/{abilityId}/dependencies/resources/{dependencyId}/download/start':
    post:
      tags:
        - Abilities Management
      summary: Start download
      description: Downloads an ability's dependency.
      parameters:
        - name: abilityId
          in: path
          description: 'ID of an existing ability (e.g., optical-character-recognition)'
          required: true
          schema:
            type: string
        - name: dependencyId
          in: path
          description: 'ID of an ability''s dependency (e.g., pandas)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Download started
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/abilities/{abilityId}/dependencies/resources/{dependencyId}/download/stop':
    post:
      tags:
        - Abilities Management
      summary: Stop download
      description: Stops download of an ability's dependency.
      parameters:
        - name: abilityId
          in: path
          description: 'ID of an existing ability (e.g., optical-character-recognition)'
          required: true
          schema:
            type: string
        - name: dependencyId
          in: path
          description: 'ID of an ability''s dependency (e.g., pandas)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Download stopped
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/abilities/{abilityId}/dependencies/resources/{dependencyId}/download/delete':
    post:
      tags:
        - Abilities Management
      summary: Delete download
      description: Deletes download of an ability's dependency.
      parameters:
        - name: abilityId
          in: path
          description: 'ID of an existing ability (e.g., optical-character-recognition)'
          required: true
          schema:
            type: string
        - name: dependencyId
          in: path
          description: 'ID of an ability''s dependency (e.g., pandas)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Download deleted
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/abilities/{abilityId}/dependencies/python/{dependencyId}/install':
    post:
      tags:
        - Abilities Management
      summary: Start install
      description: Installs an ability's dependency.
      parameters:
        - name: abilityId
          in: path
          description: 'ID of an existing ability (e.g., optical-character-recognition)'
          required: true
          schema:
            type: string
        - name: dependencyId
          in: path
          description: 'ID of an ability''s dependency (e.g., pandas)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Install started
      servers:
        - url: 'http://localhost:3080/api/v1'
          description: ''
  '/mobile/abilities':
    get:
      tags:
        - Mobile App Abilities Management
      summary: Retrieve all abilities for mobile app
      description: Retrieve the information of all abilities available in the mobile app.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ability'
              examples:
                Example 1:
                  value:
                    - id: optical-character-recognition
                      name: Optical Character Recognition
                      description: Conversion of images to text
                    - id: vector-database
                      name: Vector Database
                      description: Stores vectors (fixed-length lists of numbers) along with other data items
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
  '/mobile/personas':
    get:
      tags:
        - Mobile App Personas Management
      summary: Retrieve all personas for mobile app
      description: Retrieve the information of all personas available in the mobile app.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Persona'
              examples:
                Example 1:
                  value:
                    - id: assistant
                      name: Assistant Persona
                      description: A persona for AI assistant with specific skills and knowledge.
                    - id: agent
                      name: Agent Persona
                      description: A persona for AI agent focused on automation and tasks execution.
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
  '/mobile/llms':
    get:
      tags:
        - Mobile App LLMs Management
      summary: Retrieve all large language models for mobile app
      description: Retrieve the information of all large language models available in the mobile app.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LLM'
              examples:
                Example 1:
                  value:
                    - id: gpt-3
                      name: GPT-3
                      description: Third version of the Generative Pre-trained Transformer.
                    - id: bert
                      name: BERT
                      description: Bidirectional Encoder Representations from Transformers.
          headers:
            X-Total-Count:
              schema:
                type: string
                example: '2'
              description: Count of results required by jsonServer Data Provider for pagination
tags:
  - name: Abilities Management
    description: Installation and configuration of abilities
  - name: Asset Management
    description: Management of assets
  - name: Channel Management
    description: Discovery and configuration of input/output interfaces/channels
  - name: Configuration Management
    description: Management of configuration
  - name: User Management
    description: Management of user accounts
  - name: Mobile App Abilities Management
    description: Management of abilities within the mobile app
  - name: Mobile App Personas Management
    description: Management of personas within the mobile app
  - name: Mobile App LLMs Management
    description: Management of large language models within the mobile app
components:
  schemas:
    Ability:
      type: object
      title: Ability
      description: Additional abilities (plug-ins)
      properties:
        id:
          type: string
          pattern: '^[a-z0-9-]+'
          minLength: 2
          maxLength: 100
        name:
          type: string
          example: optical-character-recognition
        description:
          type: string
          example: Optical Character Recognition
    Asset:
      type: object
      title: Asset
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        creator:
          type: string
        subject:
          type: string
        description:
          type: string
    Channel:
      type: object
      title: Channel
      description: Channels (input/output)
      properties:
        id:
          type: string
        name:
          type: string
        uri:
          type: string
    Config:
      title: Config
      anyOf:
        - type: boolean
        - type: integer
        - type: number
        - type: string
        - type: object
        - type: array
          items:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - type: object
    User:
      type: object
      title: User
      description: pAI-OS users
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - name
        - email
    Persona:
      type: object
      title: Persona
      description: Personas for AI assistants and agents within the mobile app.
      properties:
        id:
          type: string
          description: Unique identifier for the given persona.
        name:
          type: string
        description:
          type: string
    LLM:
      type: object
      title: LLM
      description: Large Language Models available within the mobile app.
      properties:
        id:
          type: string
          description: Unique identifier for the given LLM.
        name:
          type: string
        description:
          type: string
